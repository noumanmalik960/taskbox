[{"D:\\bootcamp\\taskbox-again\\src\\components\\Task.stories.tsx":"1","D:\\bootcamp\\taskbox-again\\src\\components\\Task.tsx":"2","D:\\bootcamp\\taskbox-again\\src\\components\\TaskList.stories.tsx":"3","D:\\bootcamp\\taskbox-again\\src\\components\\TaskList.tsx":"4","D:\\bootcamp\\taskbox-again\\src\\index.tsx":"5","D:\\bootcamp\\taskbox-again\\src\\App.tsx":"6","D:\\bootcamp\\taskbox-again\\src\\lib\\taskSlice.ts":"7","D:\\bootcamp\\taskbox-again\\src\\lib\\store.ts":"8","D:\\bootcamp\\taskbox-again\\src\\components\\InboxScreen.stories.tsx":"9","D:\\bootcamp\\taskbox-again\\src\\components\\InboxScreen.tsx":"10"},{"size":703,"mtime":1609865284583,"results":"11","hashOfConfig":"12"},{"size":1190,"mtime":1610036417787,"results":"13","hashOfConfig":"12"},{"size":1523,"mtime":1610102276046,"results":"14","hashOfConfig":"12"},{"size":1999,"mtime":1610053847213,"results":"15","hashOfConfig":"12"},{"size":517,"mtime":1610054040513,"results":"16","hashOfConfig":"12"},{"size":139,"mtime":1610054069818,"results":"17","hashOfConfig":"12"},{"size":1139,"mtime":1610101918453,"results":"18","hashOfConfig":"12"},{"size":184,"mtime":1610055394111,"results":"19","hashOfConfig":"12"},{"size":1033,"mtime":1610055300998,"results":"20","hashOfConfig":"12"},{"size":877,"mtime":1610054682322,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"vj0y1d",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\bootcamp\\taskbox-again\\src\\components\\Task.stories.tsx",["43"],"D:\\bootcamp\\taskbox-again\\src\\components\\Task.tsx",["44"],"D:\\bootcamp\\taskbox-again\\src\\components\\TaskList.stories.tsx",["45","46"],"D:\\bootcamp\\taskbox-again\\src\\components\\TaskList.tsx",[],"D:\\bootcamp\\taskbox-again\\src\\index.tsx",[],"D:\\bootcamp\\taskbox-again\\src\\App.tsx",[],"D:\\bootcamp\\taskbox-again\\src\\lib\\taskSlice.ts",[],"D:\\bootcamp\\taskbox-again\\src\\lib\\store.ts",[],"D:\\bootcamp\\taskbox-again\\src\\components\\InboxScreen.stories.tsx",["47"],"import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PureInboxScreen } from \"./InboxScreen\";\r\nimport * as TaskListStories from \"./TaskList.stories\";\r\nimport { action } from \"@storybook/addon-actions\";\r\n\r\nexport interface ErrorType {\r\n  error: string;\r\n}\r\n// this one is the mock store, we can use our own store here too(store branch)\r\nconst mockStore = {\r\n  getState: () => {\r\n    return {\r\n      tasks: TaskListStories.Default.args?.tasks,\r\n    };\r\n  },\r\n  subscribe: () => 0,\r\n  dispatch: action(\"dispatch\"),\r\n};\r\nexport default {\r\n  component: PureInboxScreen,\r\n  title: \"InboxScreen\",\r\n  decorators: [\r\n    //@ts-ignore\r\n    //ignoring this because I will implement my own store in the other branch\r\n    (story: any) => <Provider store={mockStore}>{story()}</Provider>,\r\n  ],\r\n};\r\n\r\nconst Template = (args: ErrorType | any) => <PureInboxScreen {...args} />;\r\n\r\nexport const Default = Template.bind({});\r\n\r\nexport const Error = Template.bind({});\r\n//@ts-ignore\r\nError.args = {\r\n  error: \"Something\",\r\n};\r\n","D:\\bootcamp\\taskbox-again\\src\\components\\InboxScreen.tsx",[],{"ruleId":"48","severity":1,"message":"49","line":5,"column":1,"nodeType":"50","endLine":8,"endColumn":3},{"ruleId":"51","severity":1,"message":"52","line":41,"column":11,"nodeType":"53","endLine":41,"endColumn":44},{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":16},{"ruleId":"48","severity":1,"message":"49","line":6,"column":1,"nodeType":"50","endLine":14,"endColumn":3},{"ruleId":"48","severity":1,"message":"49","line":20,"column":1,"nodeType":"50","endLine":28,"endColumn":3},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'TaskList' is defined but never used.","Identifier","unusedVar"]